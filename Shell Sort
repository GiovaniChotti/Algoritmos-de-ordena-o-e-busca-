#include <iostream>
#include <vector>
using namespace std;

void shellSort(vector<int>& arr, const vector<int>& gaps) {
    int n = arr.size();
    for (int gap : gaps) {
        for (int i = gap; i < n; i++) {
            int temp = arr[i];
            int j = i;
            while (j >= gap && arr[j - gap] > temp) {
                arr[j] = arr[j - gap];
                j -= gap;
            }
            arr[j] = temp;
        }
    }
}

vector<int> shellSequence(int n) {
    vector<int> gaps;
    for (int gap = n / 2; gap > 0; gap /= 2) {
        gaps.push_back(gap);
    }
    return gaps;
}

vector<int> knuthSequence(int n) {
    vector<int> gaps;
    int gap = 1;
    while (gap < n) {
        gaps.push_back(gap);
        gap = 3 * gap + 1;
    }
    return gaps;
}

vector<int> hibbardSequence(int n) {
    vector<int> gaps;
    for (int i = 1; (1 << i) - 1 < n; i++) {
        gaps.push_back((1 << i) - 1);
    }
    return gaps;
}

void printArray(const vector<int>& arr) {
    for (int num : arr) {
        cout << num << " ";
    }
    cout << endl;
}

void printSequence(const string& name, const vector<int>& gaps) {
    cout << name << ": ";
    for (int gap : gaps) {
        cout << gap << " ";
    }
    cout << endl;
}

int main() {
    vector<int> arr = {19, 3, 10, 15, 7, 8, 23, 74, 18, 27, 43};

    vector<int> gaps = shellSequence(arr.size());
    printSequence("Sequência de Shell Sort", gaps);

    shellSort(arr, gaps);
    cout << "Vetor ordenado com Shell Sort: ";
    printArray(arr);

    arr = {19, 3, 10, 15, 7, 8, 23, 74, 18, 27, 43};

    gaps = knuthSequence(arr.size());
    printSequence("\nSequência de Knuth", gaps);

    shellSort(arr, gaps);
    cout << "Vetor ordenado com Knuth Sequence: ";
    printArray(arr);

    arr = {19, 3, 10, 15, 7, 8, 23, 74, 18, 27, 43};

    gaps = hibbardSequence(arr.size());
    printSequence("\nSequência de Hibbard", gaps);

    shellSort(arr, gaps);
    cout << "Vetor ordenado com Hibbard Sequence: ";
    printArray(arr);

    return 0;
}
