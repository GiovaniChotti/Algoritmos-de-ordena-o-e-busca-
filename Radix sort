#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// Função para obter o maior elemento do vetor
int getMax(const vector<int>& arr) {
    return *max_element(arr.begin(), arr.end());
}

// Função de counting sort para radix sort
void countingSort(vector<int>& arr, int exp) {
    int n = arr.size();
    vector<int> output(n);
    int count[10] = {0};

    // Contagem de dígitos
    for (int i = 0; i < n; i++) {
        count[(arr[i] / exp) % 10]++;
    }

    // Somatória cumulativa
    for (int i = 1; i < 10; i++) {
        count[i] += count[i - 1];
    }

    // Ordenação
    for (int i = n - 1; i >= 0; i--) {
        output[count[(arr[i] / exp) % 10] - 1] = arr[i];
        count[(arr[i] / exp) % 10]--;
    }

    // Atualização do vetor original
    arr = output;
}

// Função de radix sort
void radixSort(vector<int>& arr) {
    int m = getMax(arr);
    for (int exp = 1; m / exp > 0; exp *= 10) {
        countingSort(arr, exp);
    }
}

// Função para imprimir vetor
void printArray(const vector<int>& arr, const string& mensagem) {
    cout << mensagem << ": ";
    for (int num : arr) {
        cout << num << " ";
    }
    cout << endl;
}

int main() {
    vector<int> arr = {170, 45, 75, 90, 802, 24, 2, 66};

    printArray(arr, "Array original");
    radixSort(arr);
    printArray(arr, "Array ordenado");

    return 0;
}
